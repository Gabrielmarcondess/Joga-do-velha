// See https://aka.ms/new-console-template for more information
using System;

public class GerarTabuleiro
{
    public static void ImprimirTabuleiro(int[,] tabuleiro)
    {
        int linhasConteudo = 5; // 3 linhas do tabuleiro + 2 divisórias
        Menu.CentralizarVertical(linhasConteudo);

        for (int i = 0; i <= 2; i++)
        {
            string linha = "";
            for (int x = 0; x <= 2; x++)
            {
                if (tabuleiro[i, x] == 0)
                    linha += "   ";
                else if (tabuleiro[i, x] == -1)
                    linha += "[ ]";
                else if (tabuleiro[i, x] == 1)
                    linha += " x ";
                else if (tabuleiro[i, x] == 2)
                    linha += " o ";
                else if (tabuleiro[i, x] == 3)
                    linha += "[x]";
                else if (tabuleiro[i, x] == 4)
                    linha += "[o]";

                if (x < 2)
                    linha += "|";
            }

            Menu.EscreverCentralizado(linha);

            if (i < 2)
                Menu.EscreverCentralizado("---|---|---");
        }
    }

}


public class ExemploSetas
{
    public static (int i, int x, bool enter) LerTeclado(int i, int x, bool enter)

    {
        ConsoleKeyInfo keyInfo;

        keyInfo = Console.ReadKey(true); // true para não exibir a tecla pressionada

        switch (keyInfo.Key)
        {
            case ConsoleKey.UpArrow:
                if (i - 1 < 0)
                {
                    return (i, x, enter = false);
                }
                else
                {
                    return (i - 1, x, enter = false);
                }
            case ConsoleKey.DownArrow:
                if (i + 1 > 2)
                {
                    return (i, x, enter = false);
                }
                else
                {
                    return (i + 1, x, enter = false);

                }



            case ConsoleKey.LeftArrow:
                if (x - 1 < 0)
                {
                    return (i, x, enter = false);
                }
                else
                {
                    return (i, x - 1, enter = false);
                }

            case ConsoleKey.RightArrow:
                if (x + 1 > 2)
                {
                    return (i, x, enter = false);
                }
                else
                {
                    return (i, x + 1, enter = false);
                }
            case ConsoleKey.Enter:
                return (i, x, enter = true);
            default:
                return (i, x, enter = false);

        }

    }
}
class Menu
{
    public static int vitoriasX = 0;
    public static int vitoriasO = 0;
    public static void EscreverCentralizado(string texto)
    {
        int larguraConsole = Console.WindowWidth;
        int espacos = Math.Max((larguraConsole - texto.Length) / 2, 0);
        Console.WriteLine(new string(' ', espacos) + texto);
    }
    public static void CentralizarVertical(int linhasConteudo)
    {
        int alturaConsole = Console.WindowHeight;
        int linhasEmBranco = Math.Max((alturaConsole - linhasConteudo) / 2, 0);
        for (int i = 0; i < linhasEmBranco; i++)
        {
            Console.WriteLine();
        }
    }

    public static void MenuPrincipal()
    {
        int opcao = 0;
        ConsoleKey tecla;

        do
        {
            Console.Clear();
            CentralizarVertical(10); // número de linhas do menu

            EscreverCentralizado("+ - O - X - O - X - O - +");
            EscreverCentralizado("|        Main menu      |");
            EscreverCentralizado("O                       O");
            EscreverCentralizado(opcao == 0 ? "|  +Jogador VS Jogador+ |" : "|   Jogador VS Jogador  |");
            EscreverCentralizado(opcao == 1 ? "|  +Jogador VS IA hard+ |" : "|   Jogador VS IA hard  |");
            EscreverCentralizado(opcao == 2 ? "|  +Jogador VS IA easy+ |" : "|   Jogador VS IA easy  |");
            EscreverCentralizado(opcao == 3 ? "X        +Placar+       X" : "X         Placar        X");
            EscreverCentralizado(opcao == 4 ? "|         +Sair+        |" : "|          Sair         |");
            EscreverCentralizado("O                       O");
            EscreverCentralizado("+ - O - X - O - X - O - +");
            Console.WriteLine();

            if (opcao == 0)
                EscreverCentralizado("|   Jogar jogador vs Jogador       |");
            else if (opcao == 1)
                EscreverCentralizado("|          Jogar Hard              |");
            else if (opcao == 2)
                EscreverCentralizado("|          Jogar Easy              |");
            else if (opcao == 3)
                EscreverCentralizado("|           Ver placar             |");
            else if (opcao == 4)
                EscreverCentralizado("|         Sair para o menu         |");


            tecla = Console.ReadKey(true).Key;

            if (tecla == ConsoleKey.UpArrow)
                opcao = (opcao - 1 + 5) % 5;
            else if (tecla == ConsoleKey.DownArrow)
                opcao = (opcao + 1) % 5;
            else if (tecla == ConsoleKey.Enter)
            {
                if (opcao == 0)
                {
                    Console.Clear();
                    Console.WriteLine("Deseja jogar novamente?");
                    Jogo jogo = new Jogo();
                    jogo.JogoVelha();
                }
                if (opcao == 1)
                {
                    Console.Clear();
                    Console.WriteLine("Deseja jogar novamente?");
                    Jogo jogo = new Jogo();
                    jogo.ContraMaquinaHard();
                }
                if (opcao == 2)
                {
                    Console.Clear();
                    Console.WriteLine("Deseja jogar novamente?");
                    Jogo jogo = new Jogo();
                    jogo.ContraMaquinaEasy();
                }

                else if (opcao == 3)
                {
                    Console.Clear();
                    Console.WriteLine("Deseja ver o placar desta partida?");
                    Menu MenuPlacar = new Menu();
                    MenuPlacar.MenuPlacar();
                }
                else if (opcao == 4)
                {
                    Console.Clear();
                    Console.WriteLine("Deseja sair para o menu?");
                    MenuSair();

                }
            }

        } while (true);
    }


    void MenuPlacar()
    {
        int opcaoPlacar = 0;
        ConsoleKey tecla;

        do
        {
            Console.Clear();
            CentralizarVertical(8);

            EscreverCentralizado("+ - O - X - O - X - O - +");
            EscreverCentralizado("|        Placar         |");
            EscreverCentralizado($"O         PX: {vitoriasX}         O");
            EscreverCentralizado($"|         PO: {vitoriasO}         |");
            EscreverCentralizado("X                       X");
            EscreverCentralizado(opcaoPlacar == 0 ? "|    +Voltar ao Menu+   |" : "|    Voltar ao Menu     |");
            EscreverCentralizado(opcaoPlacar == 1 ? "X    +Resetar pontos+   X" : "X    Resetar pontos     X");
            EscreverCentralizado("+ - O - X - O - X - O - +");

            tecla = Console.ReadKey(true).Key;

            if (tecla == ConsoleKey.UpArrow)
                opcaoPlacar = (opcaoPlacar - 1 + 2) % 2;
            else if (tecla == ConsoleKey.DownArrow)
                opcaoPlacar = (opcaoPlacar + 1) % 2;
            else if (tecla == ConsoleKey.Enter)
            {
                if (opcaoPlacar == 0)
                {
                    return;
                }
                else if (opcaoPlacar == 1)
                {
                    Console.Clear();
                    vitoriasX = 0;
                    vitoriasO = 0;
                    EscreverCentralizado("Placar resetado!");
                    Console.ReadKey();
                }
            }
        } while (true);
    }

    public static void MenuFimPartida(string Vencedor)
    {
        int OpcaoFim = 0;
        if(Vencedor == "Jogador x")
        {
            Menu.vitoriasX++;
        }
        if (Vencedor == "Jogador O")
        {
            Menu.vitoriasO++;
        }
        ConsoleKey tecla;
        do
        {
            Console.Clear();
            EscreverCentralizado("----------------------------------------");
            EscreverCentralizado($"|      Parabéns, {Vencedor}!      |");
            EscreverCentralizado("|                                        |");
            EscreverCentralizado(OpcaoFim == 0 ? "|   + Jogar jogador vs Jogador +         |" : "|     Jogar jogador vs Jogador           |");
            EscreverCentralizado(OpcaoFim == 1 ? "|           + Jogar Hard +               |" : "|             Jogar Hard                 |");
            EscreverCentralizado(OpcaoFim == 2 ? "|           + Jogar Easy +               |" : "|             Jogar Easy                 |");
            EscreverCentralizado(OpcaoFim == 3 ? "|           + Ver placar +               |" : "|             Ver placar                 |");
            EscreverCentralizado(OpcaoFim == 4 ? "|        + Sair para o menu +            |" : "|          Sair para o menu              |");
            EscreverCentralizado("----------------------------------------");


            Console.WriteLine();
            if (OpcaoFim == 0)
                EscreverCentralizado("|   Jogar jogador vs Jogador       |");
            else if (OpcaoFim == 1)
                EscreverCentralizado("|          Jogar Hard              |");
            else if (OpcaoFim == 2)
                EscreverCentralizado("|          Jogar Easy              |");
            else if (OpcaoFim == 3)
                EscreverCentralizado("|           Ver placar             |");
            else if (OpcaoFim == 4)
                EscreverCentralizado("|         Sair para o menu         |");


            tecla = Console.ReadKey(true).Key;

            if (tecla == ConsoleKey.UpArrow)
                OpcaoFim = (OpcaoFim - 1 + 5) % 5;
            else if (tecla == ConsoleKey.DownArrow)
                OpcaoFim = (OpcaoFim + 1) % 5;
            else if (tecla == ConsoleKey.Enter)
            {
                if (OpcaoFim == 0)
                {
                    Console.Clear();
                    Console.WriteLine("Deseja jogar novamente?");
                    Jogo jogo = new Jogo();
                    jogo.JogoVelha();
                }
                if (OpcaoFim == 1)
                {
                    Console.Clear();
                    Console.WriteLine("Deseja jogar novamente?");
                    Jogo jogo = new Jogo();
                    jogo.ContraMaquinaHard();
                }
                if (OpcaoFim == 2)
                {
                    Console.Clear();
                    Console.WriteLine("Deseja jogar novamente?");
                    Jogo jogo = new Jogo();
                    jogo.ContraMaquinaEasy();
                }

                else if (OpcaoFim == 3)
                {
                    Console.Clear();
                    Console.WriteLine("Deseja ver o placar desta partida?");
                    Menu MenuPlacar = new Menu();
                    MenuPlacar.MenuPlacar();
                }
                else if (OpcaoFim == 4)
                {
                    Console.Clear();
                    Console.WriteLine("Deseja sair para o menu?");
                    MenuSair();

                }
            }
        } while (true);
    }
    static void MenuSair()
    {
        int opcaoSair = 0;
        ConsoleKey tecla;

        do
        {
            Console.Clear();
            CentralizarVertical(6);

            EscreverCentralizado("+ - O - X - O - X - O - +");
            EscreverCentralizado("|  Deseja Sair do jogo  |");
            EscreverCentralizado("O                       O");
            EscreverCentralizado(opcaoSair == 0 ? "|         +Sim+         |" : "|          Sim          |");
            EscreverCentralizado(opcaoSair == 1 ? "X         +Não+         X" : "X          Não          X");
            EscreverCentralizado("+ - O - X - O - X - O - +");

            tecla = Console.ReadKey(true).Key;

            if (tecla == ConsoleKey.UpArrow)
                opcaoSair = (opcaoSair - 1 + 2) % 2;
            else if (tecla == ConsoleKey.DownArrow)
                opcaoSair = (opcaoSair + 1) % 2;
            else if (tecla == ConsoleKey.Enter)
            {
                if (opcaoSair == 0)
                {
                    Console.Clear();
                    EscreverCentralizado("Saindo do jogo...");
                    Environment.Exit(0);
                }
                else if (opcaoSair == 1)
                {
                    return;
                }
            }
        } while (true);
    }

}
class Roda
{
    static void Main(string[] args)
    {
        Menu.MenuPrincipal();
    }
}
class Jogo
{
    public int[,] tabuleiro =
        {
            {0,0,0},
            {0,-1,0},
            {0,0,0}
        };
    Random rand = new Random();
    public string Vencedor = "";
    public void JogoVelha()
    {
        int novoEixoX = 1;
        int novoEixoY = 1;
        int antigoEixoX = 1;
        int antigoEixoY = 1;
        int resultado = 0;
        bool enter = false;
        int turno = 0;
        while (resultado == 0)
        {
            resultado = VerificarVitoria();
            enter = false;
            antigoEixoX = novoEixoX;
            antigoEixoY = novoEixoY;
            GerarTabuleiro.ImprimirTabuleiro(tabuleiro);
            (novoEixoY, novoEixoX, enter) = ExemploSetas.LerTeclado(novoEixoY, novoEixoX, enter);

            Console.Clear();
            if (tabuleiro[antigoEixoY, antigoEixoX] == -1)
            {
                tabuleiro[antigoEixoY, antigoEixoX] = 0;
            }
            else if (tabuleiro[antigoEixoY, antigoEixoX] == 3)
            {
                tabuleiro[antigoEixoY, antigoEixoX] = 1;
            }
            else if (tabuleiro[antigoEixoY, antigoEixoX] == 4)
            {
                tabuleiro[antigoEixoY, antigoEixoX] = 2;
            }
            if (tabuleiro[novoEixoY, novoEixoX] == 0)
            {
                tabuleiro[novoEixoY, novoEixoX] = -1;
            }
            else if (tabuleiro[novoEixoY, novoEixoX] == 1)
            {
                tabuleiro[novoEixoY, novoEixoX] = 3;
            }
            else if (tabuleiro[novoEixoY, novoEixoX] == 2)
            {
                tabuleiro[novoEixoY, novoEixoX] = 4;
            }

            if (enter == true && tabuleiro[novoEixoY, novoEixoX] == -1)
            {
                if (turno == 0)
                {
                    tabuleiro[novoEixoY, novoEixoX] = 1;
                    turno = 1;
                }
                else
                {
                    tabuleiro[novoEixoY, novoEixoX] = 2;
                    turno = 0;
                }
            }
            resultado = VerificarVitoria();
        }
        if (resultado == 1)
        {
            Vencedor = "Jogador x";
            Menu.MenuFimPartida(Vencedor);
        }
        if (resultado == 2)
        {
            Vencedor = "Jogador O";
            Menu.MenuFimPartida(Vencedor);
        }
        if (resultado == 3)
        {
            Vencedor = "empate";
            Menu.MenuFimPartida(Vencedor);
        }

    }
    public void ContraMaquinaEasy()
    {
        int novoEixoX = 1;
        int novoEixoY = 1;
        int antigoEixoX = 1;
        int antigoEixoY = 1;
        int resultado = 0;
        bool enter = false;
        int turno = 0;
        while (resultado == 0)
        {
            enter = false;
            antigoEixoX = novoEixoX;
            antigoEixoY = novoEixoY;
            GerarTabuleiro.ImprimirTabuleiro(tabuleiro);
            if (turno == 0)
            {
                (novoEixoY, novoEixoX, enter) = ExemploSetas.LerTeclado(novoEixoY, novoEixoX, enter);

                Console.Clear();
                if (tabuleiro[antigoEixoY, antigoEixoX] == -1)
                {
                    tabuleiro[antigoEixoY, antigoEixoX] = 0;
                }
                else if (tabuleiro[antigoEixoY, antigoEixoX] == 3)
                {
                    tabuleiro[antigoEixoY, antigoEixoX] = 1;
                }
                else if (tabuleiro[antigoEixoY, antigoEixoX] == 4)
                {
                    tabuleiro[antigoEixoY, antigoEixoX] = 2;
                }
                if (tabuleiro[novoEixoY, novoEixoX] == 0)
                {
                    tabuleiro[novoEixoY, novoEixoX] = -1;
                }
                else if (tabuleiro[novoEixoY, novoEixoX] == 1)
                {
                    tabuleiro[novoEixoY, novoEixoX] = 3;
                }
                else if (tabuleiro[novoEixoY, novoEixoX] == 2)
                {
                    tabuleiro[novoEixoY, novoEixoX] = 4;
                }

                if (enter == true && tabuleiro[novoEixoY, novoEixoX] == -1)
                {
                    if (turno == 0)
                    {
                        tabuleiro[novoEixoY, novoEixoX] = 1;
                        turno = 1;
                    }
                }
            }
            resultado = VerificarVitoria();
            if (resultado == 1)
            {
                Vencedor = "Jogador x";
                Menu.MenuFimPartida(Vencedor);
            }
            if (resultado == 2)
            {
                Vencedor = "Jogador O";
                Menu.MenuFimPartida(Vencedor);
            }
            if (resultado == 3)
            {
                Vencedor = "empate";
                Menu.MenuFimPartida(Vencedor);
            }
            if (turno == 1)
            {
                (novoEixoY, novoEixoX) = verificarMaquinaEasy();

                tabuleiro[novoEixoY, novoEixoX] = 2;

                turno = 0;

                Console.Clear();
            }




        }
        resultado = VerificarVitoria();
        if (resultado == 1)
        {
            Vencedor = "Jogador x";
            Menu.MenuFimPartida(Vencedor);
        }
        if (resultado == 2)
        {
            Vencedor = "Jogador O";
            Menu.MenuFimPartida(Vencedor);
        }
        if (resultado == 3)
        {
            Vencedor = "empate";
            Menu.MenuFimPartida(Vencedor);
        }
    }
    public (int x, int y) verificarMaquinaEasy()
    {
        int markedX, markedY;
        do
        {
            markedX = rand.Next(0, 3);
            markedY = rand.Next(0, 3);
        }
        while (tabuleiro[markedY, markedX] != 0);
        return (markedY, markedX);
    }
    public void ContraMaquinaHard()
    {
        int novoEixoX = 1;
        int novoEixoY = 1;
        int antigoEixoX = 1;
        int antigoEixoY = 1;
        int resultado = 0;
        bool enter = false;
        int turno = 0;
        while (resultado == 0)
        {
            enter = false;
            antigoEixoX = novoEixoX;
            antigoEixoY = novoEixoY;
            GerarTabuleiro.ImprimirTabuleiro(tabuleiro);
            if (turno == 0)
            {
                (novoEixoY, novoEixoX, enter) = ExemploSetas.LerTeclado(novoEixoY, novoEixoX, enter);

                Console.Clear();
                if (tabuleiro[antigoEixoY, antigoEixoX] == -1)
                {
                    tabuleiro[antigoEixoY, antigoEixoX] = 0;
                }
                else if (tabuleiro[antigoEixoY, antigoEixoX] == 3)
                {
                    tabuleiro[antigoEixoY, antigoEixoX] = 1;
                }
                else if (tabuleiro[antigoEixoY, antigoEixoX] == 4)
                {
                    tabuleiro[antigoEixoY, antigoEixoX] = 2;
                }
                if (tabuleiro[novoEixoY, novoEixoX] == 0)
                {
                    tabuleiro[novoEixoY, novoEixoX] = -1;
                }
                else if (tabuleiro[novoEixoY, novoEixoX] == 1)
                {
                    tabuleiro[novoEixoY, novoEixoX] = 3;
                }
                else if (tabuleiro[novoEixoY, novoEixoX] == 2)
                {
                    tabuleiro[novoEixoY, novoEixoX] = 4;
                }

                if (enter == true && tabuleiro[novoEixoY, novoEixoX] == -1)
                {
                    if (turno == 0)
                    {
                        tabuleiro[novoEixoY, novoEixoX] = 1;
                        turno = 1;
                    }
                }
            }
            resultado = VerificarVitoria();
            if (resultado == 1)
            {
                Vencedor = "Jogador x";
                Menu.MenuFimPartida(Vencedor);
            }
            if (resultado == 2)
            {
                Vencedor = "Jogador O";
                Menu.MenuFimPartida(Vencedor);
            }
            if (resultado == 3)
            {
                Vencedor = "empate";
                Menu.MenuFimPartida(Vencedor);
            }
            if (turno == 1)
            {
                (novoEixoY, novoEixoX) = verificarMaquinaHard();

                tabuleiro[novoEixoY, novoEixoX] = 2;

                turno = 0;

                Console.Clear();
            }




        }
        resultado = VerificarVitoria();
        if (resultado == 1)
        {
            Vencedor = "Jogador x";
            Menu.MenuFimPartida(Vencedor);
        }
        if (resultado == 2)
        {
            Vencedor = "Jogador O";
            Menu.MenuFimPartida(Vencedor);
        }
        if (resultado == 3)
        {
            Vencedor = "empate";
            Menu.MenuFimPartida(Vencedor);
        }
    }
    public (int x, int y) verificarMaquinaHard()
    {
        int[,] taticasuja1 =
        {
            {0,1,0 },
            {1,0,0 },
            {0,0,0 }
        };
        int[,] taticasuja2 =
        {
            {0,1,0 },
            {0,0,1 },
            {0,0,0 }
        };
        int[,] taticasuja3 =
        {
            {0,0,0 },
            {0,0,1 },
            {0,1,0 }
        };
        int[,] taticasuja4 =
        {
            {0,0,0 },
            {0,0,0 },
            {0,1,0 }
        };


        int markedX1 = 0;
        int markedY1 = 0;
        int markedX2 = -1;
        int markedY2 = -1;
        int CountEmptySpaces = 0;
        int CountOSpaces = 0;
        int CountXSpaces = 0;
        if (tabuleiro[1, 1] == 1 && tabuleiro[0, 0] == 0 && tabuleiro[1, 0] == 0 && tabuleiro[0, 1] == 0 && tabuleiro[2, 0] == 0 && tabuleiro[0, 2] == 0 &&
            tabuleiro[1, 2] == 0 && tabuleiro[2, 1] == 0)
        {
            return (2, 2);
        }
        if (tabuleiro[1, 0] == 1 && tabuleiro[0, 1] == 1 && tabuleiro[2, 0] == 0 && tabuleiro[0, 2] == 0 &&
            tabuleiro[1, 2] == 0 && tabuleiro[2, 1] == 0 && tabuleiro[0, 0] == 0)
        {
            return (0, 0);
        }
        if (tabuleiro[0, 1] == 1 && tabuleiro[1, 2] == 1 && tabuleiro[1, 0] == 0 && tabuleiro[2, 0] == 0 && tabuleiro[0, 2] == 0
             && tabuleiro[2, 1] == 0)
        {
            return (0, 2);
        }
        if (tabuleiro[2, 1] == 1 && tabuleiro[1, 2] == 1 && tabuleiro[1, 0] == 0 && tabuleiro[0, 1] == 0 && tabuleiro[2, 0] == 0 && tabuleiro[0, 2] == 0 && tabuleiro[2, 2] == 0
            )
        {
            return (2, 2);
        }
        if (tabuleiro[1, 0] == 1 && tabuleiro[2, 1] == 1 && tabuleiro[1, 1] == 0 && tabuleiro[0, 0] == 0 && tabuleiro[1, 0] == 0 && tabuleiro[0, 1] == 0 && tabuleiro[0, 2] == 0 &&
            tabuleiro[1, 2] == 0)
        {
            return (2, 0);
        }
        for (int y = 0; y < 3; y++) //linhas
        {
            CountOSpaces = 0;
            CountXSpaces = 0;
            CountEmptySpaces = 0;
            for (int x = 0; x < 3; x++)
            {

                if (tabuleiro[y, x] == 0)
                {

                    markedX1 = x;
                    markedY1 = y;
                    CountEmptySpaces++;


                }
                else if (tabuleiro[y, x] == 1)
                {
                    CountXSpaces++;
                }
                else if (tabuleiro[y, x] == 2)
                {
                    CountOSpaces++;
                }
            }
            if (CountOSpaces == 2 && CountEmptySpaces == 1)
            {
                return (markedY1, markedX1);
            }
            if (CountXSpaces == 2 && CountEmptySpaces == 1)
            {
                markedX2 = markedX1;
                markedY2 = markedY1;
            }
        }
        CountOSpaces = 0;
        CountXSpaces = 0;
        CountEmptySpaces = 0;
        for (int i = 0; i < 3; i++) //diagonal
        {

            if (tabuleiro[i, i] == 0)
            {

                markedX1 = i;
                markedY1 = i;
                CountEmptySpaces++;

            }
            else if (tabuleiro[i, i] == 1)
            {
                CountXSpaces++;
            }
            else if (tabuleiro[i, i] == 2)
            {
                CountOSpaces++;
            }
            if (CountOSpaces == 2 && CountEmptySpaces == 1)
            {
                return (markedY1, markedX1);
            }
            if (CountXSpaces == 2 && CountEmptySpaces == 1)
            {
                markedX2 = markedX1;
                markedY2 = markedY1;
            }
        }
        CountOSpaces = 0;
        CountXSpaces = 0;
        CountEmptySpaces = 0;
        for (int i = 0; i < 3; i++) //Diagonal reversa 
        {
            int ii = 2 - i;
            if (tabuleiro[i, ii] == 0)
            {

                markedX1 = ii;
                markedY1 = i;
                CountEmptySpaces++;

            }
            else if (tabuleiro[i, ii] == 1)
            {
                CountXSpaces++;
            }
            else if (tabuleiro[i, ii] == 2)
            {
                CountOSpaces++;
            }
            if (CountOSpaces == 2 && CountEmptySpaces == 1)
            {
                return (markedY1, markedX1);
            }
            if (CountXSpaces == 2 && CountEmptySpaces == 1)
            {
                markedX2 = markedX1;
                markedY2 = markedY1;
            }
        }

        for (int x = 0; x < 3; x++) //colunas
        {
            CountOSpaces = 0;
            CountXSpaces = 0;
            CountEmptySpaces = 0;
            for (int y = 0; y < 3; y++)
            {

                if (tabuleiro[y, x] == 0)
                {

                    markedX1 = x;
                    markedY1 = y;
                    CountEmptySpaces++;

                }
                else if (tabuleiro[y, x] == 1)
                {
                    CountXSpaces++;
                }
                else if (tabuleiro[y, x] == 2)
                {
                    CountOSpaces++;
                }
            }
            if (CountOSpaces == 2 && CountEmptySpaces == 1)
            {
                return (markedY1, markedX1);
            }
            if (CountXSpaces == 2 && CountEmptySpaces == 1)
            {
                markedX2 = markedX1;
                markedY2 = markedY1;
            }
        }
        if (markedX2 != -1)
        {
            return (markedY2, markedX2);
        }
        if (tabuleiro[1, 1] == 0)
        {
            return (1, 1);
        }
        else
        {
            do
            {
                markedX1 = rand.Next(0, 3);
                markedY1 = rand.Next(0, 3);
            }
            while (tabuleiro[markedY1, markedX1] != 0);
            return (markedY1, markedX1);
        }
    }
    public int VerificarVitoria()
    {
        int empate = 0;
        // Verificar linhas
        for (int i = 0; i < 3; i++)
        {
            if (tabuleiro[i, 0] != 0 &&
                tabuleiro[i, 0] == tabuleiro[i, 1] &&
                tabuleiro[i, 1] == tabuleiro[i, 2])
            {
                if (tabuleiro[i, 0] == 1)
                {
                    return 1;
                }
                else
                {
                    return 2;
                }
            }
        }

        // Verificar colunas
        for (int j = 0; j < 3; j++)
        {
            if (tabuleiro[0, j] != 0 &&
                tabuleiro[0, j] == tabuleiro[1, j] &&
                tabuleiro[1, j] == tabuleiro[2, j])
            {
                if (tabuleiro[0, j] == 1)
                {
                    return 1;
                }
                else
                {
                    return 2;
                }
            }
        }

        // Verificar diagonais
        if (tabuleiro[0, 0] != 0 &&
            tabuleiro[0, 0] == tabuleiro[1, 1] &&
            tabuleiro[0, 0] == tabuleiro[2, 2])
        {
            if (tabuleiro[0, 0] == 1)
            {
                return 1;
            }
            else
            {
                return 2;
            }
        }

        if (tabuleiro[0, 2] != 0 &&
            tabuleiro[0, 2] == tabuleiro[1, 1] &&
            tabuleiro[0, 2] == tabuleiro[2, 0])
        {
            if (tabuleiro[0, 2] == 1)
            {
                return 1;
            }
            else
            {
                return 2;
            }
        }
        foreach (int valor in tabuleiro)
        {
            if (valor == 1 || valor == 2)
            {
                empate++;
            }
        }
        if (empate == 9)
        {
            return 3; // Empate
        }


        return 0;
    }
}


